@page
@model HangersAndSupportsPrompts.Pages.IndexModel
@{
    Layout = null;
    ViewData["Title"] = "H&S Hub - Code Snippet Finder";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #3b82f6 0%, #1e3a8a 100%);
            margin: 0;
            padding: 20px;
            color: #2c3e50;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            background: #fff;
            max-width: 800px;
            width: 100%;
            padding: 40px 50px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            text-align: center;
        }

        .logo {
            margin-bottom: 25px;
        }

            .logo img {
                max-height: 100px;
                border-radius: 10px;
            }

        h2 {
            font-size: 2.2rem;
            margin-bottom: 30px;
            color: #34495e;
            font-weight: 700;
        }

        label {
            display: block;
            text-align: left;
            font-weight: 600;
            font-size: 1rem;
            margin-bottom: 8px;
            color: #555;
        }

        input[type="text"],
        input[type="file"] {
            width: 100%;
            padding: 14px 18px;
            font-size: 1.1rem;
            border: 2px solid #ddd;
            border-radius: 12px;
            transition: all 0.3s ease;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

            input[type="text"]:focus,
            input[type="file"]:focus {
                border-color: #3b82f6;
                box-shadow: 0 0 8px rgba(59, 130, 246, 0.5);
                outline: none;
            }

        button {
            margin-top: 10px;
            padding: 14px 35px;
            font-size: 1.15rem;
            font-weight: 700;
            color: #fff;
            background: #3b82f6;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 8px 15px rgba(59, 130, 246, 0.4);
        }

            button:hover {
                background-color: #2563eb;
                transform: translateY(-3px);
            }

        .code-block {
            background-color: #f9fafb;
            border: 1px solid #e0e6f0;
            padding: 20px;
            border-radius: 16px;
            font-family: 'Consolas', monospace;
            font-size: 1rem;
            color: #222;
            white-space: pre-wrap;
            margin-top: 35px;
            max-height: 300px;
            overflow-y: auto;
            text-align: left;
        }

        .error {
            margin-top: 30px;
            color: #e74c3c;
            font-weight: 700;
            font-size: 1.1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Logo -->
        <div class="logo">
            <img src="/images/logo.png" alt="Hexagon Capability Center Logo" />
        </div>

        <h2>✨ H&amp;S Snippet Hub </h2>

        <!-- Prompt Form -->
        <form method="post">
            <label for="Prompt">Enter Prompt Keyword</label>
            <input type="text" id="Prompt" name="Prompt" value="@Model.Prompt" placeholder="e.g. Pipe Support" autocomplete="off" />
            <button type="submit" name="action" value="prompt">🔍 Search</button>
        </form>

        <!-- File Upload -->
        <form method="post" enctype="multipart/form-data">
            <label for="UploadedFile">Upload any file (image, PDF, doc, etc.)</label>
            <input type="file" id="UploadedFile" name="UploadedFile" />
            <button type="submit" name="action" value="upload">📤 Upload & Analyze</button>
        </form>

        <!-- Prompt Result -->
        <div id="results">
            @if (!string.IsNullOrWhiteSpace(Model.Snippet))
            {
                <h4 style="margin-top: 40px; color: #34495e;">🧾 Code Snippet</h4>
                <div class="code-block" id="snippetOutput"></div>
                <button onclick="copySnippet()" style="margin-top: 10px;">📋 Copy</button>
            }

            @if (!string.IsNullOrWhiteSpace(Model.Example))
            {
                <h4 style="margin-top: 40px; color: #34495e;">💡 Example Usage</h4>
                <div class="code-block" id="exampleOutput"></div>
            }

            @if (!string.IsNullOrWhiteSpace(Model.Prompt) && string.IsNullOrWhiteSpace(Model.Snippet))
            {
                <div class="error">❌ No snippet found for "<strong>@Model.Prompt</strong>"</div>
            }
        </div>

        <!-- Upload Result -->
        @if (!string.IsNullOrWhiteSpace(Model.UploadResult))
        {
            <h4 style="margin-top: 40px; color: #34495e;">📁 Upload Result</h4>
            <div class="code-block">@Model.UploadResult</div>
        }
    </div>

    <script>
        function typeText(elementId, text, delay = 15) {
            const el = document.getElementById(elementId);
            let index = 0;
            el.innerHTML = "";

            function type() {
                if (index < text.length) {
                    const char = text.charAt(index);
                    el.innerHTML += char === '\n' ? '<br/>' : char;
                    index++;
                    setTimeout(type, delay);
                }
            }

            type();
        }

        window.onload = function () {
            const snippet = @Html.Raw(Json.Serialize(Model.Snippet ?? ""));
            const example = @Html.Raw(Json.Serialize(Model.Example ?? ""));

            if (snippet) typeText("snippetOutput", snippet, 10);
            if (example) typeText("exampleOutput", example, 10);
        };
                function copySnippet() {
            const snippet = document.getElementById("snippetOutput").innerText;
            navigator.clipboard.writeText(snippet).then(() => {
                alert("Snippet copied to clipboard!");
            }).catch(err => {
                alert("Failed to copy: " + err);
            });
        }

    </script>
</body>
</html>
